"set t_Co=256                " 256 color terminal (seems to mess up the color scheme)
set nocompatible
set hidden                  " Hide buffers instead of closing them (useful for :e)

set showcmd                 " Show partial command as it is typed
set showmode                " Show INSERT, REPLACE or VISUAL
set showmatch               " When a bracket is inserted, briefly jump to the matching one
set nowrap                  " Don't soft-wrap
set number
set wildignore=*.swp,*.pyc  " Ignore these patterns when tab-completing
set virtualedit=block       " Move freely into null-space when in visual block mode
set splitright              " When splitting to view a new file, open it on the right
set splitbelow              " When splitting to view a new file, open it at the bottom

" Searching options
set hlsearch                " Highlight search term
set incsearch               " Show search matches as you type
"set smartcase               " Ignore case when search is all lowercase

" Color options
syntax on
set background=light
highlight SignColumn ctermbg=None
"highlight Search ctermbg=Yellow

" GUI systems integration (mouse, clipboard)
set mouse=a
set ttymouse=xterm2
if has('mouse_sgr')
    set ttymouse=sgr
endif
set ttyscroll=1         " https://wiki.archlinux.org/index.php/Vim/.vimrc
set clipboard=unnamed   " Copy/paste from X

" Tell vim to remember certain things when we exit
"  '100   :  marks will be remembered for up to 100 previously edited files
"  "10000 :  will save up to 1000 lines for each register
"  :20    :  up to 20 lines of command-line history will be remembered
"  n...   :  where to save the viminfo files
set viminfo='100,\"10000,:20,n~/.vim/viminfo

" Tabs and indentation
set tabstop=4
set softtabstop=4
set expandtab
set autoindent
"set smartindent
set nocindent
set shiftwidth=4            " Number of spaces used for auto-indent
set smarttab                " Insert tabs on the start of a line according to shiftwidth, not tabstop
set backspace=indent,eol,start " Backspace over auto-indent, line breaks and past the start of the insert

" Tabs for HTML (and templates) and CSS
" TODO This should be replaced by settings in plugins
autocmd FileType html,htmldjango,mako,css,javascript,json set tabstop=2
autocmd FileType html,htmldjango,mako,css,javascript,json set softtabstop=2
autocmd FileType html,htmldjango,mako,css,javascript,json set shiftwidth=2

" Remove extraneous whitespace from the end of a buffer.
autocmd BufWritePre,FileWritePre,FileAppendPre * :%s/\(\S\)\@<=\s\+$//e
autocmd BufWritePre,FileWritePre,FileAppendPre * :%s/[ \t\r]\+$//e

" Highlight HTML like django
"autocmd FileType html set filetype=htmldjango

" Status line
set laststatus=2                " status line even with only one window
set statusline=[%n]             " buffer number
set statusline+=%(\ %m%r%h%)    " [+][RO][Help]
set statusline+=\ %f            " file name
set statusline+=%=              " start right aligned items
set statusline+=%y              " [filetype]
set statusline+=\ [%3b:0x%02B]  " byte at cursor, in hex
set statusline+=\ %2c,%3l/%L    " col, line/maxlines


" === Better default keys

nnoremap n nzz
nnoremap N Nzz
nnoremap } }zz
nnoremap { {zz
nnoremap <Space> <C-w><C-w>


" === Utility keys

" highlight word under cursor
nnoremap <F10> :set hls<CR>:let @/="<C-r><C-w>"<CR>
nnoremap <S-F10> :nohls<CR>

" cursor crosshair
hi CursorLine   cterm=NONE ctermbg=darkyellow ctermfg=white guibg=darkyellow guifg=white
hi CursorColumn cterm=NONE ctermbg=darkyellow ctermfg=white guibg=darkyellow guifg=white
" :nnoremap <Leader>c :set cursorline! cursorcolumn!<CR>
nnoremap <F11> :set cursorline! cursorcolumn!<CR>

" highlight text after column 79
hi bigline none
match bigline /\%80v.\+/
nnoremap <F12> :hi bigline ctermbg=red ctermfg=white guibg=#592929<CR>
nnoremap <S-F12> :hi bigline none<CR>

" ssh mode: hide numbers, unset mouse, set paste
nnoremap <F9> :set nonu<CR>:set mouse=""<CR>:set paste<CR>
nnoremap <S-F9> :set nu<CR>:set mouse=a<CR>:set nopaste<CR>

" === Misc settings

" mkview options (Vim scripts that restore the contents of the current window)
set viewoptions=cursor,folds,options
set viewdir=~/.vim/view

" maintain the buffer's view options and restore them when coming back
" (in particular topline so that it doesn't scroll the current line to middle of screen)
" This emulates a windowbuffer-local by having a window-local dictionary with buffer numbers as keys
"au VimEnter,WinEnter * if(!exists('w:bufsettings')) | let w:bufsettings = {} | endif
"au BufLeave * let w:bufsettings[bufnr('%')] = winsaveview()
"au BufEnter * if(exists('w:bufsettings['.bufnr('%').']')) | call winrestview(w:bufsettings[bufnr('%')]) | endif

" Demonstrate the triggering of (Win|Buf)(Enter|Leave) events
"au VimEnter * let g:EventsHist = []
"au WinEnter * call add(g:EventsHist, 'WE-'.winnr().'-'.bufnr('%'))
"au WinLeave * call add(g:EventsHist, 'WL-'.winnr().'-'.bufnr('%'))
"au BufEnter * call add(g:EventsHist, 'BE-'.winnr().'-'.bufnr('%'))
"au BufLeave * call add(g:EventsHist, 'BL-'.winnr().'-'.bufnr('%'))


" === Vundle
" https://github.com/gmarik/vundle

filetype off                    " required!

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
Plugin 'gmarik/Vundle.vim'

" ---
"Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
"Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
"Plugin 'amitdev/vimpy'
Plugin 'andviro/flake8-vim'
Plugin 'hynek/vim-python-pep8-indent'
Plugin 'pangloss/vim-javascript'
Plugin 'Shutnik/jshint2.vim'
Plugin 'kchmck/vim-coffee-script'
Plugin 'vim-scripts/nginx.vim'

" My bundles here:
" original repos on github
"Plugin 'Lokaltog/vim-easymotion'
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
"Plugin 'tpope/vim-rails.git'
" vim-scripts repos
"Plugin 'L9'
"Plugin 'FuzzyFinder'
" non github repos
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (ie. when working on your own plugin)
"Plugin 'file:///Users/gmarik/path/to/plugin'
" ...

call vundle#end()
filetype plugin indent on     " required!
"
" Brief help
" :Plugin        - list configured bundles
" :Plugin(!)     - install(update) bundles
" :Plugin(!) foo - search(or refresh cache first) for foo
" :Plugin(!)     - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Plugin command are not allowed..


" --- flake8-vim options ---
let g:PyFlakeOnWrite = 0
let g:PyFlakeMaxLineLength = 120

" --- nginx.vim setup ---
au BufRead,BufNewFile /etc/nginx/*,/home/tek/etc/nginx/* if &ft == '' | setfiletype nginx | endif

